library(tidyverse)
breast <- readr::read_csv('breast.csv')
breast <- breast %>% dplyr::select(-c('id','...33')) %>%
dplyr::mutate(diagnosis = ifelse(diagnosis == 'M', 1, 0)) %>%
dplyr::mutate(diagnosis = as.factor(diagnosis))
unique(breast$diagnosis)
colnames(breast)
summary(baseline_model)
baseline_model <- glm(diagnosis ~ radius_mean + area_mean, family = 'binomial', data = breast)
summary(baseline_model)
baseline_model <- glm(diagnosis ~ radius_mean + texture_mean, family = 'binomial', data = breast)
baseline_model <- glm(diagnosis ~ radius_mean + texture_mean, family = 'binomial', data = breast)
summary(baseline_model)
library(caret)
colnames(breast)
baseline_model <- glm(diagnosis ~ radius_mean + texture_mean, family = 'binomial', data = breast)
summary(baseline_model)
train_test_split <- createDataPartition(breast$diagnosis, list = FALSE, p=0.75)
breast_train <- breast[train_test_split,]
breast_test <- breast[-train_test_split,]
baseline_model <- glm(diagnosis ~ radius_mean + texture_mean, family = 'binomial', data = breast_train)
summary(baseline_model)
baseline_cm
fmpreds <- predict(first_model, breast_test, type = 'response')
fmpreds <- predict(baseline_model, breast_test, type = 'response')
fmpreds_classes <- ifelse(fmpreds > 0.5, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmpreds_classes <- ifelse(fmpreds > 0.2, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmpreds_classes <- ifelse(fmpreds > 0.1, 1, 0)
fmpreds_classes <- ifelse(fmpreds > 0.1, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmpreds_classes <- ifelse(fmpreds > 0.8, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmpreds_classes <- ifelse(fmpreds > 0.7, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
?roc
fmroc <- pROC::roc(response = breast$diagnosis, predictor = fmpreds)
fmroc <- pROC::roc(response = breast_test$diagnosis, predictor = fmpreds)
plot(fmroc)
pROC::plot.roc(response = breast_test$diagnosis, predictor = fmpreds, legacy.axes = TRUE)
pROC::plot.roc(fmroc, response = breast_test$diagnosis, predictor = fmpreds, legacy.axes = TRUE)
ggroc(fmroc, legacy.axes = TRUE)
ggplot2::ggroc(fmroc, legacy.axes = TRUE)
proc::ggroc(fmroc, legacy.axes = TRUE)
pROC::ggroc(fmroc, legacy.axes = TRUE)
pROC::ggroc(fmroc, legacy.axes = TRUE) + geom_abline(1,1)
pROC::ggroc(fmroc, legacy.axes = TRUE) + geom_abline(slope = 1, intercept = 0)
fmroc$auc
dim(breast_test$diagnosis)
length(breast_test$diagnosis)
random_classifier
random_classifier <- rbinom(1, size = 142, prob = 0.5)
random_classifier
random_classifier <- rbinom(142, prob = 0.5)
random_classifier <- rbinom(142, size = 1, prob = 0.5)
random_classifier <- rbinom(142, size = 1, prob = 0.5)
random_classifier
pROC::ggroc(random_roc, legacy.axes = TRUE)
random_classifier <- rep(0.5, 142)
random_roc <- pROC::roc(response = breast_test$diagnosis, predictor = random_classifier)
pROC::ggroc(random_roc, legacy.axes = TRUE)
fmroc$auc
stars <- readr::read_csv('star_classification.csv')
dim(stars)
colnames(stars)
unique(stars$class)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.1)
dim(breast_train)
dim(stars_train)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.1)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
dim(stars_train)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.05)
dim(stars_train)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=1)
dim(stars_train)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.5)
dim(stars_train)
dim(stars)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.1)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.1)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
dim(stars_train)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.05)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
dim(stars_train)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.1)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
dim(stars_train)
unique(stars_train$class)
table(stars_train$class)
table(stars$class)
readr::write_csv(stars_train,'stars.csv')
stars <- readr::read_csv('stars.csv')
head(stars)
summary(stars)
confusionMatrix(as.factor(stars$class), as.factor(predict(fm_stars,stars)))
fm_stars <- glm(class ~ u + g + r + i + z, data = stars, family = 'binomial')
head(predict(fm_stars, stars))
fm_stars <- glm(class ~ u + g + r + i + z, data = stars, family = 'binomial')
#head(predict(fm_stars, stars))
#head(predict(fm_stars, stars))
summary(fm_stars)
fm_stars <- glm(class ~ u + g + r + i + z, data = stars, family = 'binomial')
fm_stars <- glm(class ~ u + g + r + i + z, data = stars, family = 'multinomial')
?glm
?lda
lda(class ~ u + g + r + i + z, data = stars_train)
MASS:lda(class ~ u + g + r + i + z, data = stars_train)
library(MASS)
MASS:lda(class ~ u + g + r + i + z, data = stars_train)
lda(class ~ u + g + r + i + z, data = stars_train)
summary(lda(class ~ u + g + r + i + z, data = stars_train))
summary(lda(class ~ u + g + r + i + z, data = stars_train))
unique(stars$class)
stars_train <- stars_train %>% dplyr::mutate(class, ifelse(class == "QSO", 0, ifelse(class = "STAR", 1, 2)))
stars_train <- stars_train %>% dplyr::mutate(class, ifelse(class == "QSO", 0, ifelse(class == "STAR", 1, 2)))
lda(class ~ u + g + r + i + z, data = stars_train)
lda(class ~ u + g, data = stars_train)
predict(star_lda, stars_test)
star_lda <- lda(class ~ u + g, data = stars_train)
predict(star_lda, stars_test)
head(predict(star_lda, stars_test))
confusionMatrix(stars_test$class, start_pred$class)
confusionMatrix(stars_test$class, star_pred$class)
star_lda <- lda(class ~ u + g, data = stars_train)
star_pred <- predict(star_lda, stars_test)
confusionMatrix(stars_test$class, star_pred$class)
confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
todo <- readr::read_csv('star_classification.csv')
table(todo$class)
table(todo$class)
todo_1 <- todo %>% dplyr::filter(class == 'STAR') %>% sample_n(3000)
todo_2 <- todo %>% dplyr::filter(class == 'QSO') %>% sample_n(3000)
todo_3 <- todo %>% dplyr::filter(class == 'GALAXY') %>% sample_n(4000)
todo <- dplyr::union(todo_1, todo_2, todo_3)
table(todo$class)
todo_1 <- todo %>% dplyr::filter(class == 'STAR') %>% sample_n(3000)
todo_2 <- todo %>% dplyr::filter(class == 'QSO') %>% sample_n(3000)
todo_3 <- todo %>% dplyr::filter(class == 'GALAXY') %>% sample_n(4000)
todo <- readr::read_csv('star_classification.csv')
todo_1 <- todo %>% dplyr::filter(class == 'STAR') %>% sample_n(3000)
todo_2 <- todo %>% dplyr::filter(class == 'QSO') %>% sample_n(3000)
todo_3 <- todo %>% dplyr::filter(class == 'GALAXY') %>% sample_n(4000)
todo <- dplyr::union(todo_1, todo_2, todo_3)
table(todo$class)
todo <- readr::read_csv('star_classification.csv')
todo_1 <- todo %>% dplyr::filter(class == 'STAR') %>% sample_n(3000)
todo_2 <- todo %>% dplyr::filter(class == 'QSO') %>% sample_n(3000)
todo_3 <- todo %>% dplyr::filter(class == 'GALAXY') %>% sample_n(4000)
todo <- rbind(todo_1, todo_2, todo_3)
table(todo$class)
todo <- readr::read_csv('star_classification.csv')
table(todo$class)
todo_1 <- todo %>% dplyr::filter(class == 'STAR') %>% sample_n(3000)
library(tidyverse)
library(caret)
breast <- readr::read_csv('breast.csv')
breast <- breast %>% dplyr::select(-c('id','...33')) %>%
dplyr::mutate(diagnosis = ifelse(diagnosis == 'M', 1, 0)) %>%
dplyr::mutate(diagnosis = as.factor(diagnosis))
unique(breast$diagnosis)
todo_1 <- todo %>% dplyr::filter(class == 'STAR') %>% sample_n(3000)
todo_2 <- todo %>% dplyr::filter(class == 'QSO') %>% sample_n(3000)
todo_3 <- todo %>% dplyr::filter(class == 'GALAXY') %>% sample_n(4000)
todo <- rbind(todo_1, todo_2, todo_3)
table(todo$class)
readr::write_csv(todo, 'stars.csv')
?ggord
install.packages('superml')
library(superml)
library(tidyverse)
library(caret)
breast <- readr::read_csv('breast.csv')
breast <- breast %>% dplyr::select(-c('id','...33')) %>%
dplyr::mutate(diagnosis = ifelse(diagnosis == 'M', 1, 0)) %>%
dplyr::mutate(diagnosis = as.factor(diagnosis))
unique(breast$diagnosis)
colnames(breast)
train_test_split <- createDataPartition(breast$diagnosis, list = FALSE, p=0.75)
breast_train <- breast[train_test_split,]
breast_test <- breast[-train_test_split,]
baseline_model <- glm(diagnosis ~ radius_mean + texture_mean, family = 'binomial', data = breast_train)
summary(baseline_model)
fmpreds <- predict(baseline_model, breast_test, type = 'response')
fmpreds_classes <- ifelse(fmpreds > 0.5, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmpreds_classes <- ifelse(fmpreds > 0.7, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmroc <- pROC::roc(response = breast_test$diagnosis, predictor = fmpreds)
pROC::plot.roc(fmroc, response = breast_test$diagnosis, predictor = fmpreds, legacy.axes = TRUE)
pROC::ggroc(fmroc, legacy.axes = TRUE) + geom_abline(slope = 1, intercept = 0)
random_classifier <- rep(0.5, 142)
random_roc <- pROC::roc(response = breast_test$diagnosis, predictor = random_classifier)
pROC::ggroc(random_roc, legacy.axes = TRUE)
fmroc$auc
stars <- readr::read_csv('stars.csv')
head(stars)
unique(stars$class)
fm_stars <- glm(class ~ u + g + r + i + z, data = stars, family = 'multinomial')
hist(stars$u)
hist(stars$g)
hist(stars$r)
hist(stars$i)
hist(stars$z)
library(MASS)
stars_train <- stars_train %>% dplyr::mutate(class, ifelse(class == "QSO", 0, ifelse(class == "STAR", 1, 2)))
star_lda <- lda(class ~ u + g, data = stars_train)
star_pred <- predict(star_lda, stars_test)
confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
plot(star_lda)
stars <- readr::read_csv('stars.csv')
head(stars)
fm_stars <- glm(class ~ u + g + r + i + z, data = stars, family = 'multinomial')
star_lda <- lda(class ~ u + g, data = stars_train)
star_pred <- predict(star_lda, stars_test)
confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
stars <- readr::read_csv('stars.csv')
dim(stars)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.75)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
library(MASS)
stars_train <- stars_train %>% dplyr::mutate(class, ifelse(class == "QSO", 0, ifelse(class == "STAR", 1, 2)))
star_lda <- lda(class ~ u + g, data = stars_train)
star_pred <- predict(star_lda, stars_test)
confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
plot(star_lda)
star_lda$terms
star_lda
star_lda$svd
star_lda$lev
star_lda$scaling
ggplot(star_train, aes(x = u, y = g)) + geom_point
ggplot(stars_train, aes(x = u, y = g)) + geom_point
ggplot(stars_train, aes(x = u, y = g)) + geom_point()
ggplot(dplyr::sample_n(stars_train, 200),aes(x = u, y = g)) + geom_point()
ggplot(dplyr::sample_n(stars_train, 200), aes(x = u, y = g, color = class)) + geom_point()
install.packages('ggord')
ggord(star_lda, star_train$class)
ggord::ggord(star_lda, star_train$class)
install.packages(klaR)
install.packages('klaR'')
''
install.packages('klaR')
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
install.packages("klaR")
klaR::partimat(class ~ u + g, data = stars_train, method = 'lda')
klaR::partimat(as.factor(class) ~ u + g, data = stars_train, method = 'lda')
klaR::partimat(as.factor(class) ~ u + g, data = sample_n(stars_train, 200), method = 'lda')
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'lda')
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'lda', prec = 250)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'lda', prec = 500)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'qda', prec = 500)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'lda', prec = 500)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'qda', prec = 500)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'qda', prec = 250)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'qda', prec = 100)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'qda', prec = 500)
library(klaR)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'lda', prec = 500)
star_lda <- lda(class ~ u + g, data = stars_train)
star_pred <- predict(star_lda, stars_test)
confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
library(tidyverse)
library(caret)
breast <- readr::read_csv('breast.csv')
breast <- breast %>% dplyr::select(-c('id','...33')) %>%
dplyr::mutate(diagnosis = ifelse(diagnosis == 'M', 1, 0)) %>%
dplyr::mutate(diagnosis = as.factor(diagnosis))
unique(breast$diagnosis)
caret::confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
Granicę decyzyjną wybieramy tam, gdzie $P(Y = y_i| X = X_i) = P(Y = y_j)$, czyli gdzie powyższe wyrażenie się zeruje, a takie wyrażenie jest liniowe względem obserwacji $x$, zatem granice decyzyjne są hiperpłaszczyznami. Równoważnie możemy zdefiniować
\[ \delta_i(x) = x^T \Sigma^{-1}\mu_i - \frac{1}{2} \mu_i^T \Sigma^{-1} \mu_i + ln \pi_i  \]
i podjąć decyzję za pomocą reguły $argmax_{i \in \{ 1, \dots, k\}} \delta_i(x)$.
?qda
summary(stars_logistic)
library(VGAM)
stars_logistic <- vglm(class ~ u + g, data = stars_train, family = 'multinomial')
summary(stars_logistic)
predict(stars_logistic, stars_test)
predict(stars_logistic, stars_test, type = 'response')
head(predict(stars_logistic, stars_test, type = 'response'))
probs_logistic <- predict(stars_logistic, stars_test, type = 'response')
head(probs_logistic)
predictions_logistic <- rapply(probs_logistic, argmax)
which.max()
predictions_logistic <- rapply(probs_logistic, which.max())
which.max(probs_logistic)
rapply(which.max(probs_logistic))
rapply(probs_logistic, which.max(probs_logistic))
lapply(probs_l)
lapply(probs_logistic, which.max())
lapply(probs_logistic, which.max)
head(lapply(probs_logistic, which.max))
predictions_logistic <- rapply(probs_logistic, which.max - 1)
predictions_logistic <- rapply(probs_logistic, which.max)
predictions_logistic <- lapply(probs_logistic, which.max)
head(predictions_logistic)
predictions_logistic <- sapply(probs_logistic, which.max)
head(predictions_logistic)
predictions_logistic <- sapply(probs_logistic, which.max, USE.NAMES = TRUE)
head(predictions_logistic)
predictions_logistic <- lapply(probs_logistic, which.max, USE.NAMES = TRUE)
predictions_logistic <- lapply(probs_logistic, which.max)
head(predictions_logistic)
predictions_logistic <- apply(probs_logistic, 1, which.max)
head(predictions_logistic)
predictions_logistic <- apply(probs_logistic, 2, which.max)
head(predictions_logistic)
predictions_logistic <- apply(probs_logistic, 0, which.max)
predictions_logistic <- apply(probs_logistic, 1, which.max)
head(predictions_logistic)
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max))
head(predictions_logistic)
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max, USE.NAMES = TRUE))
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max))
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max))
head(predictions_logistic)
stars <- readr::read_csv('stars.csv')
stars <- stars %>% dplyr::mutate(class, ifelse(class == "QSO", 0, ifelse(class == "STAR", 1, 2)))
dim(stars)
unique(stars$class)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.75)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
library(VGAM)
stars_logistic <- vglm(class ~ u + g, data = stars_train, family = 'multinomial')
summary(stars_logistic)
probs_logistic <- predict(stars_logistic, stars_test, type = 'response')
head(probs_logistic)
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max))
head(predictions_logistic)
caret::confusionMatrix(data = predictions_logistic, reference = as.factor(stars$class),)
caret::confusionMatrix(data = predictions_logistic, reference = as.factor(stars$class))
stars <- stars %>% dplyr::mutate(class = ifelse(class == "QSO", 0, ifelse(class == "STAR", 1, 2)))
unique(stars$class)
probs_logistic <- predict(stars_logistic, stars_test, type = 'response')
head(probs_logistic)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.75)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
library(VGAM)
stars_logistic <- vglm(class ~ u + g, data = stars_train, family = 'multinomial')
summary(stars_logistic)
probs_logistic <- predict(stars_logistic, stars_test, type = 'response')
head(probs_logistic)
caret::confusionMatrix(data = predictions_logistic, reference = as.factor(stars$class))
stars <- readr::read_csv('stars.csv')
stars <- stars %>% dplyr::mutate(class = ifelse(class == "QSO", 1, ifelse(class == "STAR", 2, 3))) %>%
dplyr::mutate(class = as.factor(class))
dim(stars)
stars <- readr::read_csv('stars.csv')
stars <- stars %>% dplyr::mutate(class = ifelse(class == "QSO", 1, ifelse(class == "STAR", 2, 3))) %>%
dplyr::mutate(class = as.factor(class))
dim(stars)
unique(stars$class)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.75)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
library(VGAM)
stars_logistic <- vglm(class ~ u + g, data = stars_train, family = 'multinomial')
summary(stars_logistic)
probs_logistic <- predict(stars_logistic, stars_test, type = 'response')
head(probs_logistic)
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max))
head(predictions_logistic)
caret::confusionMatrix(data = predictions_logistic, reference = as.factor(stars$class))
caret::confusionMatrix(data = predictions_logistic, reference = as.factor(stars_test$class))
library(tidyverse)
library(caret)
breast <- readr::read_csv('breast.csv')
breast <- breast %>% dplyr::select(-c('id','...33')) %>%
dplyr::mutate(diagnosis = ifelse(diagnosis == 'M', 1, 0)) %>%
dplyr::mutate(diagnosis = as.factor(diagnosis))
unique(breast$diagnosis)
colnames(breast)
train_test_split <- createDataPartition(breast$diagnosis, list = FALSE, p=0.75)
breast_train <- breast[train_test_split,]
breast_test <- breast[-train_test_split,]
baseline_model <- glm(diagnosis ~ radius_mean + texture_mean, family = 'binomial', data = breast_train)
summary(baseline_model)
fmpreds <- predict(baseline_model, breast_test, type = 'response')
fmpreds_classes <- ifelse(fmpreds > 0.5, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmpreds_classes <- ifelse(fmpreds > 0.7, 1, 0)
baseline_cm <- confusionMatrix(factor(fmpreds_classes), factor(breast_test$diagnosis))
baseline_cm
fmroc <- pROC::roc(response = breast_test$diagnosis, predictor = fmpreds)
pROC::plot.roc(fmroc, response = breast_test$diagnosis, predictor = fmpreds, legacy.axes = TRUE)
pROC::ggroc(fmroc, legacy.axes = TRUE) + geom_abline(slope = 1, intercept = 0)
random_classifier <- rep(0.5, 142)
random_roc <- pROC::roc(response = breast_test$diagnosis, predictor = random_classifier)
pROC::ggroc(random_roc, legacy.axes = TRUE)
fmroc$auc
stars <- readr::read_csv('stars.csv')
stars <- stars %>% dplyr::mutate(class = ifelse(class == "QSO", 1, ifelse(class == "STAR", 2, 3))) %>%
dplyr::mutate(class = as.factor(class))
dim(stars)
unique(stars$class)
train_test_split <- createDataPartition(stars$class, list = FALSE, p=0.75)
stars_train <- stars[train_test_split,]
stars_test <- stars[-train_test_split,]
library(VGAM)
stars_logistic <- vglm(class ~ u + g, data = stars_train, family = 'multinomial')
summary(stars_logistic)
probs_logistic <- predict(stars_logistic, stars_test, type = 'response')
head(probs_logistic)
predictions_logistic <- as.factor(apply(probs_logistic, 1, which.max))
head(predictions_logistic)
caret::confusionMatrix(data = predictions_logistic, reference = as.factor(stars_test$class))
library(MASS)
star_lda <- lda(class ~ u + g, data = stars_train)
star_pred <- predict(star_lda, stars_test)
caret::confusionMatrix(as.factor(stars_test$class), as.factor(star_pred$class))
library(klaR)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'lda', prec = 500)
klaR::partimat(as.factor(class) ~ u + g, data = dplyr::sample_n(stars_train, 200), method = 'qda', prec = 500)
