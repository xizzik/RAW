?iris
library(tidyverse)
iris <- as.tibble(iris)
head(iris)
library(tidyverse)
iris <- as.tibble(iris)
head(iris)
unique(iris$Species)
unique(iris$Species)
iris1 <- iris %>% dplyr::mutate(Species = ifelse(Species == 'setosa', 1, ifelse(Species == 'versicolor', 2, 3)))
head(iris1)
iris1 <- iris %>% dplyr::mutate(Species = ifelse(Species == 'setosa', 1, ifelse(Species == 'versicolor', 2, 3)))
head(iris1)
iris2 <- iris %>% dplyr::mutate(Species = ifelse(Species == 'setosa', 2, ifelse(Species == 'versicolor', 3, 1)))
head(iris2)
iris2 <- iris %>% dplyr::mutate(Species = ifelse(Species == 'setosa', 2, ifelse(Species == 'versicolor', 3, 1)))
head(iris2)
summary(lm(Species ~. , data = iris1))
summary(lm(Species ~. , data = iris1))
summary(lm(Species ~., data=iris2))
summary(lm(Species ~., data=iris2))
iris3 <- iris %>% dplyr::filter(Species != 'versicolor')
head(iris3)
iris3 <- iris %>% dplyr::filter(Species != 'versicolor')
head(iris3)
iris3 <- iris %>% dplyr::filter(Species != 'versicolor') %>%
dplyr::mutate(Species = ifelse(Species='setosa', 0, 1))
iris3 <- iris %>% dplyr::filter(Species != 'versicolor') %>%
dplyr::mutate(Species = ifelse(Species == 'setosa', 0, 1))
head(iris3)
summary(lm(Species ~., data=iris3))
summary(lm(Species ~., data=iris3))
summary(glm(Species ~., data=iris3, famili='logistic'))
summary(glm(Species ~., data=iris3, family='logistic'))
summary(glm(Species ~., data=iris3, family=binomial(link = 'logit')))
summary(glm(Species ~., data=iris3, family = 'binomial' ))
summary(glm(as.factor(Species) ~., data=iris3, family = 'binomial' ))
summary(glm(Species ~., data=iris, family = 'binomial' ))
summary(glm(Species ~., data=iris3, family = 'binomial'))
summary(glm(Species ~., data = iris3, family = 'binomial', maxit=100))
heart <- readr::read_csv("heart.csv")
head(heart)
summary(glm(HeartDisease ~., data = heart, family = 'binomial'))
summary(glm(HeartDisease ~.-Age, data = heart, family = 'binomial'))
summary(glm(HeartDisease ~.-Age-RestingBP, data = heart, family = 'binomial'))
summary(glm(HeartDisease ~.-Age-RestingBP-RestingECG, data = heart, family = 'binomial'))
summary(glm(HeartDisease ~.-Age-RestingBP-RestingECG-MaxHR, data = heart, family = 'binomial'))
summary(lm(HeartDisease ~.-Age-RestingBP-RestingECG-MaxHR, data = heart))
summary(lm(HeartDisease ~., data = heart))
summary(lm(HeartDisease ~ FastingBS, data = heart))
plot(lm(HeartDisease ~ FastingBS, data = heart))
abline(lm(HeartDisease ~ FastingBS, data = heart))
heart <- readr::read_csv("heart.csv")
head(heart)
heart <- readr::read_csv('heart.csv')
head(heart)
heart <- readr::read_csv('heart.csv')
head(heart)
table(heart$HeartDisease)
library(tidyverse)
iris <- as.tibble(iris)
head(iris)
iris3 <- iris %>% dplyr::filter(Species != 'versicolor') %>%
dplyr::mutate(Species = ifelse(Species == 'setosa', 0, 1))
head(iris3)
summary(lm(Species ~., data=iris3))
class_linreg <- lm(Species ~., data=iris3)
summary(class_linreg)
plot(class_linreg, which=c(1:3,5))
ggplot(iris3, aes(x = Sepal.length, y = Petal.length, color = as.factor(Species))) + geom_point() + geom_abline(slope = (-0.07/0.18) intercept = (0.3/0.18))
ggplot(iris3, aes(x = Sepal.length, y = Petal.length, color = as.factor(Species))) + geom_point() + geom_abline(slope = (-0.07/0.18), intercept = (0.3/0.18))
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = (-0.07/0.18), intercept = (0.3/0.18))
summary(lm(Species ~ Sepal.Length + Sepal.Width, data = iris3))
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = (0.4/-0.46), intercept = (-0.37/-0.46))
db_linmodel <- lm(Species ~ Sepal.Length + Sepal.Width, data = iris3)
summary(db_linmodel)
bound_coeffs <- db_linmodel$coefficients
bound_coeffs
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias )
bound_coeffs <- db_linmodel$coefficients
bc_bias <- (bound_coeffs[1] - 1/2)/bound_coeffs[3]
bc_slope <- bound_coeffs[2]/bound_coeffs[3]
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias )
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = 1, intercept = 0 )
bound_coeffs <- db_linmodel$coefficients
bc_bias <- (bound_coeffs[1] - 1/2)/bound_coeffs[3]
bc_slope <- bound_coeffs[2]/bound_coeffs[3]
c(bc_bias, bc_slope)
bound_coeffs <- db_linmodel$coefficients
bc_bias <- -(bound_coeffs[1] - 1/2)/bound_coeffs[3]
bc_slope <- -bound_coeffs[2]/bound_coeffs[3]
c(bc_bias, bc_slope)
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias )
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'red', type = 'dashed')
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'blue', type = 'dashed')
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'blue', type = 'dashed') +labs(legend = 'Species')
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'blue', type = 'dashed') + labs(color = 'Species')
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'blue', linetype = 'dashed') + labs(color = 'Species')
bound_coeffs <- db_linmodel$coefficients
bc_bias <- -(bound_coeffs[1] - 1/2)/bound_coeffs[3]
bc_slope <- -bound_coeffs[2]/bound_coeffs[3]
c(bc_bias, bc_slope)
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'blue', linetype = 'dashed') + labs(color = 'Species')
logistic1 <- glm(Species ~ Sepal.Length + Sepal.Width, data = iris3, family = 'binomial')
summary(logistic1)
heart <- readr::read_csv('heart.csv')
head(heart)
table(heart$HeartDisease)
logistic2 <- glm(HeartDisease ~ Cholesterol + RestingBP, data = heart, family = 'binomial')
summary(logistic2)
dec_bond <- logistic2$coefficients
logistic2_slope = -dec_bond[2]/dec_bond[3]
logistic2_intercept = -dec_bond[1]/dec_bond[3]
ggplot(heart, aes(x = Cholesterol, y = RestingBP, color = HeartDisease)) + geom_point() + geom_abline(slope = logistic2_slope, intercept = logistic2_intercept, color = 'blue', linetype = 'dashed') +
labs(color = 'Species')
ggplot(heart, aes(x = Cholesterol, y = RestingBP, color = as.factor(HeartDisease))) + geom_point() + geom_abline(slope = logistic2_slope, intercept = logistic2_intercept, color = 'blue', linetype = 'dashed') +
labs(color = 'Heart Disease')
dec_bond <- logistic2$coefficients
logistic2_slope = -dec_bond[2]/dec_bond[3]
logistic2_intercept = -dec_bond[1]/dec_bond[3]
ggplot(heart, aes(x = Cholesterol, y = RestingBP, color = as.factor(HeartDisease))) + geom_point() + geom_abline(slope = logistic2_slope, intercept = logistic2_intercept, color = 'blue', linetype = 'dashed') +
labs(color = 'Heart Disease')
library(caret)
caret::confusionMatrix(data = predict(logistic2, heart[c(4,5)]), reference = heart$HeartDisease)
library(caret)
caret::confusionMatrix(data = as.factor(predict(logistic2, heart[c(4,5)])), reference = as.factor(heart$HeartDisease))
as.factor(predict(logistic2, heart[c(4,5)]))
predict(logistic2, heart[c(4,5)])
head(predict(logistic2, heart[c(4,5)]))
logit_prediction <- predict(logistic2, heart[c(4,5)])
head(logit_prediction)
logistic2_predictions <- ifelse(logit_prediction > 0.5, 1, 0)
library(caret)
caret::confusionMatrix(data = logistic2_predictions, reference = heart$HeartDisease)
logistic2_predictions <- ifelse(logit_prediction > 0.5, 1, 0)
head(logistic2_predictions)
library(caret)
caret::confusionMatrix(data = as.factor(logistic2_predictions), reference = as.factor(heart$HeartDisease))
library(tidyverse)
iris <- as.tibble(iris)
head(iris)
unique(iris$Species)
iris1 <- iris %>% dplyr::mutate(Species = ifelse(Species == 'setosa', 1, ifelse(Species == 'versicolor', 2, 3)))
head(iris1)
iris2 <- iris %>% dplyr::mutate(Species = ifelse(Species == 'setosa', 2, ifelse(Species == 'versicolor', 3, 1)))
head(iris2)
summary(lm(Species ~. , data = iris1))
summary(lm(Species ~., data=iris2))
iris3 <- iris %>% dplyr::filter(Species != 'versicolor') %>%
dplyr::mutate(Species = ifelse(Species == 'setosa', 0, 1))
head(iris3)
class_linreg <- lm(Species ~., data=iris3)
summary(class_linreg)
plot(class_linreg, which=c(1:3,5))
db_linmodel <- lm(Species ~ Sepal.Length + Sepal.Width, data = iris3)
summary(db_linmodel)
bound_coeffs <- db_linmodel$coefficients
bc_bias <- -(bound_coeffs[1] - 1/2)/bound_coeffs[3]
bc_slope <- -bound_coeffs[2]/bound_coeffs[3]
c(bc_bias, bc_slope)
ggplot(iris3, aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species))) + geom_point() + geom_abline(slope = bc_slope, intercept = bc_bias, color = 'blue', linetype = 'dashed') + labs(color = 'Species')
logistic1 <- glm(Species ~ Sepal.Length + Sepal.Width, data = iris3, family = 'binomial')
summary(logistic1)
heart <- readr::read_csv('heart.csv')
head(heart)
table(heart$HeartDisease)
logistic2 <- glm(HeartDisease ~ Cholesterol + RestingBP, data = heart, family = 'binomial')
summary(logistic2)
dec_bond <- logistic2$coefficients
logistic2_slope = -dec_bond[2]/dec_bond[3]
logistic2_intercept = -dec_bond[1]/dec_bond[3]
ggplot(heart, aes(x = Cholesterol, y = RestingBP, color = as.factor(HeartDisease))) + geom_point() + geom_abline(slope = logistic2_slope, intercept = logistic2_intercept, color = 'blue', linetype = 'dashed') +
labs(color = 'Heart Disease')
logit_prediction <- predict(logistic2, heart[c(4,5)], type = 'response')
head(logit_prediction)
logistic2_predictions <- ifelse(logit_prediction > 0.5, 1, 0)
head(logistic2_predictions)
library(caret)
caret::confusionMatrix(data = as.factor(logistic2_predictions), reference = as.factor(heart$HeartDisease))
logit_prediction <- predict(logistic2, heart[c(4,5)], type = 'response')
quantile(logit_prediction)
logit_prediction <- predict(logistic2, heart[c(4,5)], type = 'response')
head(logit_prediction)
