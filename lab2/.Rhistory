ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', xlab='Leverage', ylab='Standardized Residuals', caption='Cooks distance')
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', xlab='Leverage', ylab='Standardized Residuals', caption='Cooks distance')
library(tidyverse)
library(lmtest)
houses <- readr::read_csv('real_estate.csv')
houses <- houses %>% dplyr::rename(transaction_date = `X1 transaction date`, age = `X2 house age`,
nearest_mrt_distance = `X3 distance to the nearest MRT station`,
stores_no = `X4 number of convenience stores`,
geo_latitude = `X5 latitude`, geo_longtitude = `X6 longitude`,
price_ua = `Y house price of unit area`) %>%
dplyr::select(!No)
houses$price_ua <- ((houses$price_ua/3.3)*10000)/28.02 #zamiana na dolar za metr kwadratowy
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
cor.test(houses$nearest_mrt_distance, houses$price_ua)
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x)
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy", x='Cena za m^2', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=price_ua)) + geom_boxplot(outlier.color='red', outlier.size=5) +
labs(title="Wykres pudełkowy ceny za m^2", x='Cena za m^2', y = "") + scale_y_discrete(labels=NULL, breaks=NULL)
rightmost_value <- quantile(houses$price_ua, 0.75)+1.5*IQR(houses$price_ua)
dplyr::filter(houses, price_ua > rightmost_value)
houses <- houses %>% dplyr::mutate(price_ua = ifelse(price_ua > rightmost_value, rightmost_value, price_ua))
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy (po clippingu)", x='Cena za m^2', y = "Częstotliwość")
houses <- houses %>% dplyr::mutate(nearest_mrt_distance = log(nearest_mrt_distance))
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x)
cor.test(houses$nearest_mrt_distance, houses$price_ua)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
ggplot(houses_model, aes(x=.resid)) + geom_histogram(bins=30) + labs(title='Histogram reszt z modelu', x='Reszty', y='Częstotliwość')
ggplot(houses_model, aes(sample=.resid)) + geom_qq() + geom_qq_line() + labs(title='Wykres kwartyl-kwartyl reszt', x='Kwartyle teoretyczne', y='Kwartyle próbkowe')
shapiro.test(houses_model$residuals)
t.test(houses_model$residuals)
plot(houses_model, which=1)
ggplot(houses_model, aes(.fitted, .resid)) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
geom_hline(yintercept=0, linetype='dashed', color='red') + labs(title='Wykres zależności reszt od dopasowanych wartości', x='Dopasowane wartości',
y='Reszty')
lmtest::dwtest(houses_model)
plot(houses_model, which=3)
ggplot(houses_model, aes(.fitted, sqrt(abs(.stdresid)))) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
labs(title='Zależność pierwiastka standaryzowanych reszt od dopasowanych wartości', x='Dopasowane wartości', y='Pierwiastek standaryzowanych reszt')
lmtest::bptest(houses_model)
plot(houses_model, which = 5)
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', xlab='Leverage', ylab='Standardized Residuals', caption='Cooks distance')
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
cd2
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
summary(houses_model)
plot(houses_model, which=c(1:3,5))
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() + stat_smooth(method='lm', formula=y~x)
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', caption='Cooks distance')
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd), title='a') + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals')
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd), title='a') + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', size='Cooks distance')
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', size='Cooks distance')
library(tidyverse)
library(lmtest)
houses <- readr::read_csv('real_estate.csv')
houses <- houses %>% dplyr::rename(transaction_date = `X1 transaction date`, age = `X2 house age`,
nearest_mrt_distance = `X3 distance to the nearest MRT station`,
stores_no = `X4 number of convenience stores`,
geo_latitude = `X5 latitude`, geo_longtitude = `X6 longitude`,
price_ua = `Y house price of unit area`) %>%
dplyr::select(!No)
houses$price_ua <- ((houses$price_ua/3.3)*10000)/28.02 #zamiana na dolar za metr kwadratowy
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
cor.test(houses$nearest_mrt_distance, houses$price_ua)
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x)
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy", x='Cena za m^2', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=price_ua)) + geom_boxplot(outlier.color='red', outlier.size=5) +
labs(title="Wykres pudełkowy ceny za m^2", x='Cena za m^2', y = "") + scale_y_discrete(labels=NULL, breaks=NULL)
rightmost_value <- quantile(houses$price_ua, 0.75)+1.5*IQR(houses$price_ua)
dplyr::filter(houses, price_ua > rightmost_value)
houses <- houses %>% dplyr::mutate(price_ua = ifelse(price_ua > rightmost_value, rightmost_value, price_ua))
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy (po clippingu)", x='Cena za m^2', y = "Częstotliwość")
houses <- houses %>% dplyr::mutate(nearest_mrt_distance = log(nearest_mrt_distance))
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x)
cor.test(houses$nearest_mrt_distance, houses$price_ua)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
ggplot(houses_model, aes(x=.resid)) + geom_histogram(bins=30) + labs(title='Histogram reszt z modelu', x='Reszty', y='Częstotliwość')
ggplot(houses_model, aes(sample=.resid)) + geom_qq() + geom_qq_line() + labs(title='Wykres kwartyl-kwartyl reszt', x='Kwartyle teoretyczne', y='Kwartyle próbkowe')
shapiro.test(houses_model$residuals)
t.test(houses_model$residuals)
plot(houses_model, which=1)
ggplot(houses_model, aes(.fitted, .resid)) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
geom_hline(yintercept=0, linetype='dashed', color='red') + labs(title='Wykres zależności reszt od dopasowanych wartości', x='Dopasowane wartości',
y='Reszty')
lmtest::dwtest(houses_model)
plot(houses_model, which=3)
ggplot(houses_model, aes(.fitted, sqrt(abs(.stdresid)))) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
labs(title='Zależność pierwiastka standaryzowanych reszt od dopasowanych wartości', x='Dopasowane wartości', y='Pierwiastek standaryzowanych reszt')
lmtest::bptest(houses_model)
plot(houses_model, which = 5)
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', size='Cooks distance')
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
cd2
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
summary(houses_model)
plot(houses_model, which=c(1:3,5))
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() + stat_smooth(method='lm', formula=y~x)
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() + stat_smooth(method='lm', formula=y~x) + labs(x='', y='')
salary <- readr::read_csv('Salary_Data.csv')
salary <- readr::read_csv('Salary_Data.csv')
head(salary)
summary(lm(Salary~YearsExperience, data=salary))
shapiro.test(lm(Salary~YearsExperience, data=salary)$residuals)
hist(salary$Salary)
hist(salary$YearsExperience)
install.packages("lmtest", dependecies=TRUE)
cd
houses <- houses %>% mutate(cook_D = cd) %>% filter(cook_D >= mean(cook_D)) %>% print(houses)
library(tidyverse)
houses <- houses %>% mutate(cook_D = cd) %>% filter(cook_D >= mean(cook_D)) %>% print(houses)
houses <- houses %>% mutate(cook_D = cooks.distance(houses_model)) %>% filter(cook_D >= mean(cook_D)) %>% print(houses)
houses <- houses %>% mutate(cook_D = cooks.distance(houses_model)) %>% filter(cook_D >= mean(cook_D)) %>% print(houses)
# W tej komórce używamy składni poodstawowego R, aby wykonać operację wyrzucenia obserwacji o określonej wartości odległości Cooka. Poniżej kod używający składni Tidyverse.
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
# W tej komórce używamy składni poodstawowego R, aby wykonać operację wyrzucenia obserwacji o określonej wartości odległości Cooka. Poniżej kod używający składni Tidyverse.
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
# W tej komórce używamy składni poodstawowego R, aby wykonać operację wyrzucenia obserwacji o określonej wartości odległości Cooka. Poniżej kod używający składni Tidyverse.
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
# W tej komórce używamy składni poodstawowego R, aby wykonać operację wyrzucenia obserwacji o określonej wartości odległości Cooka. Poniżej kod używający składni Tidyverse.
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
# W tej komórce używamy składni poodstawowego R, aby wykonać operację wyrzucenia obserwacji o określonej wartości odległości Cooka. Poniżej kod używający składni Tidyverse.
cd <- cooks.distance(houses_model)
cd2 <- cd[cd > 3*mean(cd)]
as.integer(names(cd2))
houses <- houses[-as.integer(names(cd2)),]
houses
library(tidyverse)
houses <- readr::read_csv('real_estate.csv')
houses <- houses %>% dplyr::rename(transaction_date = `X1 transaction date`, age = `X2 house age`,
nearest_mrt_distance = `X3 distance to the nearest MRT station`,
stores_no = `X4 number of convenience stores`,
geo_latitude = `X5 latitude`, geo_longtitude = `X6 longitude`,
price_ua = `Y house price of unit area`) %>%
dplyr::select(!No)
houses$price_ua <- ((houses$price_ua/3.3)*10000)/28.02 #zamiana na dolar za metr kwadratowy
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
cor.test(houses$nearest_mrt_distance, houses$price_ua)
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x, se=FALSE)
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy", x='Cena za m^2', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=price_ua)) + geom_boxplot(outlier.color='red', outlier.size=5) +
labs(title="Wykres pudełkowy ceny za m^2", x='Cena za m^2', y = "") + scale_y_discrete(labels=NULL, breaks=NULL)
rightmost_value <- quantile(houses$price_ua, 0.75)+1.5*IQR(houses$price_ua)
dplyr::filter(houses, price_ua > rightmost_value)
houses <- houses %>% dplyr::mutate(price_ua = ifelse(price_ua > rightmost_value, rightmost_value, price_ua))
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy (po clippingu)", x='Cena za m^2', y = "Częstotliwość")
houses <- houses %>% dplyr::mutate(nearest_mrt_distance = log(nearest_mrt_distance))
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x, se=FALSE)
cor.test(houses$nearest_mrt_distance, houses$price_ua)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
ggplot(houses_model, aes(x=.resid)) + geom_histogram(bins=30) + labs(title='Histogram reszt z modelu', x='Reszty', y='Częstotliwość')
ggplot(houses_model, aes(sample=.resid)) + geom_qq() + geom_qq_line() + labs(title='Wykres kwartyl-kwartyl reszt', x='Kwartyle teoretyczne', y='Kwartyle próbkowe')
shapiro.test(houses_model$residuals)
t.test(houses_model$residuals)
plot(houses_model, which=1)
ggplot(houses_model, aes(.fitted, .resid)) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
geom_hline(yintercept=0, linetype='dashed', color='red') + labs(title='Wykres zależności reszt od dopasowanych wartości', x='Dopasowane wartości',
y='Reszty')
library(lmtest)
lmtest::dwtest(houses_model)
plot(houses_model, which=3)
ggplot(houses_model, aes(.fitted, sqrt(abs(.stdresid)))) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
labs(title='Zależność pierwiastka standaryzowanych reszt od dopasowanych wartości', x='Dopasowane wartości', y='Pierwiastek standaryzowanych reszt')
lmtest::bptest(houses_model)
plot(houses_model, which = 5)
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', size='Cooks distance')
houses <- houses %>% mutate(cook_D = cooks.distance(houses_model)) %>% filter(cook_D >= mean(cook_D)) %>% print(houses)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
summary(houses_model)
plot(houses_model, which=c(1:3,5))
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() + stat_smooth(method='lm', formula=y~x) + labs(x='', y='')
salary <- readr::read_csv('Salary_Data.csv')
head(salary)
cooks.distance(houses_model
cooks.distance(houses_model)
cooks.distance(houses_model)
cooks.distance(houses_model)
library(tidyverse)
houses <- readr::read_csv('real_estate.csv')
houses <- houses %>% dplyr::rename(transaction_date = `X1 transaction date`, age = `X2 house age`,
nearest_mrt_distance = `X3 distance to the nearest MRT station`,
stores_no = `X4 number of convenience stores`,
geo_latitude = `X5 latitude`, geo_longtitude = `X6 longitude`,
price_ua = `Y house price of unit area`) %>%
dplyr::select(!No)
houses$price_ua <- ((houses$price_ua/3.3)*10000)/28.02 #zamiana na dolar za metr kwadratowy
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
cor.test(houses$nearest_mrt_distance, houses$price_ua)
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x, se=FALSE)
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy", x='Cena za m^2', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=price_ua)) + geom_boxplot(outlier.color='red', outlier.size=5) +
labs(title="Wykres pudełkowy ceny za m^2", x='Cena za m^2', y = "") + scale_y_discrete(labels=NULL, breaks=NULL)
rightmost_value <- quantile(houses$price_ua, 0.75)+1.5*IQR(houses$price_ua)
dplyr::filter(houses, price_ua > rightmost_value)
houses <- houses %>% dplyr::mutate(price_ua = ifelse(price_ua > rightmost_value, rightmost_value, price_ua))
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy (po clippingu)", x='Cena za m^2', y = "Częstotliwość")
houses <- houses %>% dplyr::mutate(nearest_mrt_distance = log(nearest_mrt_distance))
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x, se=FALSE)
cor.test(houses$nearest_mrt_distance, houses$price_ua)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
ggplot(houses_model, aes(x=.resid)) + geom_histogram(bins=30) + labs(title='Histogram reszt z modelu', x='Reszty', y='Częstotliwość')
ggplot(houses_model, aes(sample=.resid)) + geom_qq() + geom_qq_line() + labs(title='Wykres kwartyl-kwartyl reszt', x='Kwartyle teoretyczne', y='Kwartyle próbkowe')
shapiro.test(houses_model$residuals)
t.test(houses_model$residuals)
plot(houses_model, which=1)
ggplot(houses_model, aes(.fitted, .resid)) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
geom_hline(yintercept=0, linetype='dashed', color='red') + labs(title='Wykres zależności reszt od dopasowanych wartości', x='Dopasowane wartości',
y='Reszty')
library(lmtest)
lmtest::dwtest(houses_model)
plot(houses_model, which=3)
ggplot(houses_model, aes(.fitted, sqrt(abs(.stdresid)))) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
labs(title='Zależność pierwiastka standaryzowanych reszt od dopasowanych wartości', x='Dopasowane wartości', y='Pierwiastek standaryzowanych reszt')
lmtest::bptest(houses_model)
plot(houses_model, which = 5)
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', size='Cooks distance')
houses <- houses %>% mutate(cook_D = cooks.distance(houses_model)) %>% filter(cook_D >= mean(cook_D)) %>% print(houses)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
summary(houses_model)
plot(houses_model, which=c(1:3,5))
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() + stat_smooth(method='lm', formula=y~x) + labs(x='', y='')
salary <- readr::read_csv('Salary_Data.csv')
head(salary)
houses <- houses %>% mutate(cook_D = cooks.distance(houses_model)) %>% filter(cook_D <= mean(cook_D)) %>% print(houses)
library(tidyverse)
houses <- readr::read_csv('real_estate.csv')
houses <- houses %>% dplyr::rename(transaction_date = `X1 transaction date`, age = `X2 house age`,
nearest_mrt_distance = `X3 distance to the nearest MRT station`,
stores_no = `X4 number of convenience stores`,
geo_latitude = `X5 latitude`, geo_longtitude = `X6 longitude`,
price_ua = `Y house price of unit area`) %>%
dplyr::select(!No)
houses$price_ua <- ((houses$price_ua/3.3)*10000)/28.02 #zamiana na dolar za metr kwadratowy
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
cor.test(houses$nearest_mrt_distance, houses$price_ua)
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x, se=FALSE)
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy", x='Cena za m^2', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=price_ua)) + geom_boxplot(outlier.color='red', outlier.size=5) +
labs(title="Wykres pudełkowy ceny za m^2", x='Cena za m^2', y = "") + scale_y_discrete(labels=NULL, breaks=NULL)
rightmost_value <- quantile(houses$price_ua, 0.75)+1.5*IQR(houses$price_ua)
dplyr::filter(houses, price_ua > rightmost_value)
houses <- houses %>% dplyr::mutate(price_ua = ifelse(price_ua > rightmost_value, rightmost_value, price_ua))
ggplot(houses, aes(x=price_ua)) + geom_histogram(bins=30) + labs(title="Histogram ceny w $ za metr kwadratowy (po clippingu)", x='Cena za m^2', y = "Częstotliwość")
houses <- houses %>% dplyr::mutate(nearest_mrt_distance = log(nearest_mrt_distance))
ggplot(houses, aes(x=nearest_mrt_distance)) + geom_histogram(bins=30) + labs(title="Histogram odległości od najbliższej stacji transportu masowego", x='Odległość od najbliższej stacji transportu masowego [m]', y = "Częstotliwość")
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() +
labs(title="Wykres punktowy zależnosci ceny metra kwadratowego od odległości od węzła komunikacyjnego", x='Odległość od węzła komuniacyjnego [m]', y = "Cena za metr kwadratowy [$/m^2]") + geom_smooth(method='lm' ,formula=y~x, se=FALSE)
cor.test(houses$nearest_mrt_distance, houses$price_ua)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
ggplot(houses_model, aes(x=.resid)) + geom_histogram(bins=30) + labs(title='Histogram reszt z modelu', x='Reszty', y='Częstotliwość')
ggplot(houses_model, aes(sample=.resid)) + geom_qq() + geom_qq_line() + labs(title='Wykres kwartyl-kwartyl reszt', x='Kwartyle teoretyczne', y='Kwartyle próbkowe')
shapiro.test(houses_model$residuals)
t.test(houses_model$residuals)
plot(houses_model, which=1)
ggplot(houses_model, aes(.fitted, .resid)) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
geom_hline(yintercept=0, linetype='dashed', color='red') + labs(title='Wykres zależności reszt od dopasowanych wartości', x='Dopasowane wartości',
y='Reszty')
library(lmtest)
lmtest::dwtest(houses_model)
plot(houses_model, which=3)
ggplot(houses_model, aes(.fitted, sqrt(abs(.stdresid)))) + geom_point() + stat_smooth(method='loess', formula=y~x, se=FALSE) +
labs(title='Zależność pierwiastka standaryzowanych reszt od dopasowanych wartości', x='Dopasowane wartości', y='Pierwiastek standaryzowanych reszt')
lmtest::bptest(houses_model)
plot(houses_model, which = 5)
ggplot(houses_model, aes(.hat, .stdresid)) + geom_point(aes(size=.cooksd)) + stat_smooth(method='loess', formula=y~x, se=FALSE) + labs(title='Leverage vs Standardized Residuals', x='Leverage', y='Standardized Residuals', size='Cooks distance')
houses <- houses %>% mutate(cook_D = cooks.distance(houses_model)) %>% filter(cook_D <= mean(cook_D)) %>% print(houses)
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
summary(houses_model)
plot(houses_model, which=c(1:3,5))
ggplot(houses, aes(x=nearest_mrt_distance, y=price_ua)) + geom_point() + stat_smooth(method='lm', formula=y~x) + labs(x='', y='')
salary <- readr::read_csv('Salary_Data.csv')
head(salary)
library(caret)
partition <- caret::createDataPartition(houses_pure$price_ua, list=FALSE, p=0.75)
library(tidyverse)
houses <- readr::read_csv('real_estate.csv')
houses <- houses %>% dplyr::rename(transaction_date = `X1 transaction date`, age = `X2 house age`,
nearest_mrt_distance = `X3 distance to the nearest MRT station`,
stores_no = `X4 number of convenience stores`,
geo_latitude = `X5 latitude`, geo_longtitude = `X6 longitude`,
price_ua = `Y house price of unit area`) %>%
dplyr::select(!No)
houses$price_ua <- ((houses$price_ua/3.3)*10000)/28.02 #zamiana na dolar za metr kwadratowy
houses_pure <- houses
houses_model <- lm(price_ua ~ nearest_mrt_distance, data=houses)
houses_summary <- summary(houses_model)
houses_summary
partition <- caret::createDataPartition(houses_pure$price_ua, list=FALSE, p=0.75)
houses_train <- houses_pure %>% filter(partition)
partition <- caret::createDataPartition(houses_pure$price_ua, list=FALSE, p=0.75)
houses_train <- houses_pure[partition,]
houses_test <- houses_pure[-partition,]
summary(lm(price_ua ~ nearest_mrt_distance ,data=houses_train))
predict(lm, houses_test)
model_splited <- lm(price_ua ~ nearest_mrt_distance ,data=houses_train)
summary(model_splited)
predict(model_splited, houses_test)
MAPE <- function(y_actual, y_predicted){
return(mean(abs(y_actual-y_predicted)/y_actual)*100)
}
RMSE <- function(y_actual, y_predicted){
return(sqrt(mean(y_actual-y_predicted)^2))
}
MAPE(houses_train$price_ua, predict(houses_train$price_ua))
MAPE(houses_train$price_ua, predict(model_split, houses_train$price_ua))
MAPE(houses_train$price_ua, predict(model_splited, houses_train$price_ua))
MAPE(houses_train$price_ua, predict(model_splited, houses_train))
RMSE(houses_train$price_ua, predict(model_splited, houses_train))
MAPE(houses_test$price_ua, predict(model_splited, houses_test))
RMSE(houses_test$price_ua, predict(model_splited, houses_test))
MAPE(houses_train$price_ua, predict(model_splited, houses_train))
RMSE(houses_train$price_ua, predict(model_splited, houses_train))^2
MAPE(houses_test$price_ua, predict(model_splited, houses_test))
RMSE(houses_test$price_ua, predict(model_splited, houses_test))
MAPE(houses_train$price_ua, predict(model_splited, houses_train))
RMSE(houses_train$price_ua, predict(model_splited, houses_train))
mean(model_splited$residuals^2)
MAPE(houses_test$price_ua, predict(model_splited, houses_test))
RMSE(houses_test$price_ua, predict(model_splited, houses_test))
MAPE(houses_train$price_ua, predict(model_splited, houses_train))
RMSE(houses_train$price_ua, predict(model_splited, houses_train))
sqrt(mean(model_splited$residuals^2))
MAPE(houses_test$price_ua, predict(model_splited, houses_test))
RMSE(houses_test$price_ua, predict(model_splited, houses_test))
MAPE <- function(y_actual, y_predicted){
return(mean(abs(y_actual-y_predicted)/y_actual)*100)
}
RMSE <- function(y_actual, y_predicted){
return(sqrt(mean((y_actual-y_predicted)^2)))
}
MAPE(houses_train$price_ua, predict(model_splited, houses_train))
RMSE(houses_train$price_ua, predict(model_splited, houses_train))
sqrt(mean(model_splited$residuals^2))
MAPE(houses_test$price_ua, predict(model_splited, houses_test))
RMSE(houses_test$price_ua, predict(model_splited, houses_test))
houses_train_of <- houses_train %>% mutate(cooks_D = cooks.distance(model_splited)) %>% filter(cooks_D <= 3*mean(cooks_D))
houses_train_of
model_splitted_of <- lm(price_ua ~ nearest_mrt_distance ,data=houses_train_of)
summary(model_splitted_of)
MAPE(houses_train_of$price_ua, predict(model_splited_of, houses_train_of))
model_splited_of <- lm(price_ua ~ nearest_mrt_distance ,data=houses_train_of)
summary(model_splitted_of)
MAPE(houses_train_of$price_ua, predict(model_splited_of, houses_train_of))
RMSE(houses_train_of$price_ua, predict(model_splited_of, houses_train_of))
sqrt(mean(model_splited$residuals^2))
MAPE(houses_test$price_ua, predict(model_splited_of, houses_test))
RMSE(houses_test$price_ua, predict(model_splited_of, houses_test))
MAPE(houses_train_of$price_ua, predict(model_splited_of, houses_train_of))
RMSE(houses_train_of$price_ua, predict(model_splited_of, houses_train_of))
MAPE(houses_test$price_ua, predict(model_splited_of, houses_test))
RMSE(houses_test$price_ua, predict(model_splited_of, houses_test))
