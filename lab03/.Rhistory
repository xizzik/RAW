library(tidyverse)
cars <- readr::read_csv('cars_dataset.csv')
cars <- cars %>% dplyr::mutate(year = 2022 - year) %>% dplyr::rename(age = year)
cars_sample <- dplyr::sample_n(cars, 1000)
cars_sample <- cars_sample %>% mutate(random_col = rnorm(1000, mean = 3, sd = 0.5))
head(cars_sample)
cars_sample <- cars_sample %>% dplyr::filter((fuelType!='Hybrid')&(fuelType!='Other')&(fuelType!='Electric'))
cars_model <- lm(price ~ age, data = cars_sample)
summary(cars_model)
ggplot(cars_sample, aes(x = age)) + geom_histogram(bins = 10)
cars_model <- lm(price ~ log(age), data=cars_sample)
summary(cars_model)
cars_model <- lm(price ~ log(age)+mpg, data=cars_sample)
summary(cars_model)
summary(lm(price ~ log(age)+random_col, data=cars_sample))
cars_model <- lm(price ~ log(age)+mpg+engineSize, data=cars_sample)
summary(cars_model)
ggplot(cars_sample, aes(x=engineSize)) + geom_histogram(bins = 20)
cars_model <- lm(price ~ log(age)+mpg+engineSize+mileage, data=cars_sample)
summary(cars_model)
round(cor(cars_sample[,c(2,5,7,8,9)]),2)
library(ggcorrplot)
install.packages(ggcorrplot)
install.packages('ggcorrplot')
library(ggcorrplot)
ggcorrplot(cor(cars_sample[,c(2,5,7,8,9)]), type='lower')
plot(cars_model, which=c(1:3,5))
plot(cars_model, which=4)
plot(cars_model, which=1:5)
library(tidyverse)
cars <- readr::read_csv('cars_dataset.csv')
cars <- cars %>% dplyr::mutate(year = 2022 - year) %>% dplyr::rename(age = year)
cars_sample <- dplyr::sample_n(cars, 1000)
cars_sample <- cars_sample %>% mutate(random_col = rnorm(1000, mean = 3, sd = 0.5))
head(cars_sample)
cars_sample <- cars_sample %>% dplyr::filter((fuelType!='Hybrid')&(fuelType!='Other')&(fuelType!='Electric'))
cars_model <- lm(price ~ age, data = cars_sample)
summary(cars_model)
ggplot(cars_sample, aes(x = age)) + geom_histogram(bins = 10)
cars_model <- lm(price ~ log(age), data=cars_sample)
summary(cars_model)
cars_model <- lm(price ~ log(age)+mpg, data=cars_sample)
summary(cars_model)
summary(lm(price ~ log(age)+random_col, data=cars_sample))
cars_model <- lm(price ~ log(age)+mpg+engineSize, data=cars_sample)
summary(cars_model)
plot(cars_model, which=1:5)
library(caret)
split <- createDataPartition(cars_sample$price, p=0.75, list=FALSE)
cars_sample_train <- cars_sample[split]
split
library(caret)
split <- createDataPartition(cars_sample$price, p=0.75, list=FALSE)
cars_sample_train <- cars_sample[split,]
cars_sample_test <- cars_sample[-split,]
cars_model <- lm(price ~ age, data = cars_sample_train)
summary(cars_model)
ggplot(cars_sample_train, aes(x = age)) + geom_histogram(bins = 10)
cars_model <- lm(price ~ log(age), data=cars_sample_train)
summary(cars_model)
cars_model
cars_model$fitted.values
cars_model$residuals
RMSE_train <- function(model){
return(sqrt(mean(model$residuals^2)))
}
MAE_train <- function(model){
return(mean(abs(model$residuals)))
}
model_summary <- function(model, test_data, test_y){
print("Wartośći charakterystyk liczbowych modelu.")
}
RMSE_train(cars_model)
cars_model <- lm(price ~ age, data = cars_sample_train)
summary(cars_model)
tidy(cars_model)
library(broom)
tidy(cars_model)
augment(cars_model)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared)
cat("Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared)
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
model_augment(cars_model)
augment(cars_model)
tidy(predict(cars_model, cars_sample_test))
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"Treningowe RMSE wyniosło: ", model_glance$sigma, "\n",
"Treningowe MAE wyniosło: ", train_mae, "\n",
"Treningowe MAPE wyniosło: ", train_mape, "%", "\n",
"Testowe RMSE wyniosło: ", test_rmse, "\n",
"Testowe MAE wyniosło: ", test_mae, "\n",
"Testowe MAPE wyniosło: ", test_mape, "%", "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka    | Wartość na zbiorze treningowym | Wartość na zbiorze testowym \n",
"RMSE wyniosło: ", model_glance$sigma, test_rmse , "\n",
"MAE wyniosło: ", train_mae, test_mae , "\n",
"MAPE wyniosło: ", train_mape, "%", test_mape, "%",  "\n",
}
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka    | Wartość na zbiorze treningowym | Wartość na zbiorze testowym \n",
"RMSE wyniosło: ", model_glance$sigma, test_rmse , "\n",
"MAE wyniosło: ", train_mae, test_mae , "\n",
"MAPE wyniosło: ", train_mape, "%", test_mape, "%",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka | Wartość na zbiorze treningowym | Wartość na zbiorze testowym \n",
"RMSE wyniosło: ", model_glance$sigma, test_rmse , "\n",
"MAE wyniosło: ", train_mae, test_mae , "\n",
"MAPE wyniosło: ", train_mape, "%", test_mape, "%",  "\n")
}
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka | zb. treningowy | zb. testowy | \n",
"RMSE wyniosło: ", model_glance$sigma, test_rmse , "\n",
"MAE wyniosło: ", train_mae, test_mae , "\n",
"MAPE wyniosło: ", train_mape, "%", test_mape, "%",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka | zb. treningowy | zb. testowy | \n",
"RMSE wyniosło: |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło: |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło: |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka | zb. treningowy | zb. testowy | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka | train | test | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train   |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |    train    |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train   |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/model_augment[,1]))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train  |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/pull(model_augment, var=1)))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train  |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/dplyr::pull(model_augment, var=1)))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train  |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", train_mape, "%|", test_mape, "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/dplyr::pull(model_augment, var=1)))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train  |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", round(train_mape,3), "%|", round(test_mape,3), "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
library(broom)
model_summary <- function(model, test_data, test_y){
model_glance <- broom::glance(model)
model_augment <- broom::augment(model)
train_mae <- mean(abs(model_augment$.resid))
train_mape <- mean(abs(model_augment$.resid/dplyr::pull(model_augment, var=1)))*100
predicted_y <- predict(model, test_data)
test_rmse <- sqrt(mean((test_y - predicted_y)^2))
test_mae <- mean(abs(test_y - predicted_y))
test_mape <- mean(abs((test_y - predicted_y)/test_y))*100
print("Wartośći charakterystyk liczbowych modelu.")
print("------------------------------------------")
cat("Treningowe R^2 wyniosło: ", model_glance$r.squared, "\n",
"Treningowe \"poprawione\" R^2 wyniosło: ", model_glance$adj.r.squared, "\n",
"Kryterium informacyjne Akaikego (AIC) wyniosło: ", model_glance$AIC, "\n",
"---------------------------------------------", "\n",
"Charakterystyki \"out-of-sample\"", "\n",
"Charakterystyka |   train  |   test   | \n",
"RMSE wyniosło:  |", model_glance$sigma, "|", test_rmse , "|", "\n",
"MAE wyniosło:   |", train_mae, "|",  test_mae, "|" , "\n",
"MAPE wyniosło:  |", round(train_mape,2), "%|", round(test_mape,2), "%|",  "\n")
}
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
cars_model <- lm(price ~ log(age)+mpg, data=cars_sample)
summary(cars_model)
bad_cars_model <- lm(price ~ log(age) + random_col, data=cars_sample_train)
bad_cars_model <- lm(price ~ log(age) + random_col, data=cars_sample_train)
summary(bad_cars_model)
model_summary(bad_cars_model)
cars_model <- lm(price ~ log(age)+mpg+engineSize, data=cars_sample_train)
summary(cars_model)
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
ggplot(cars_sample, aes(x=engineSize)) + geom_histogram(bins = 20)
ggplot(cars_sample, aes(x=engineSize)) + geom_histogram(bins = 15)
round(cor(cars_sample[,c(2,5,7,8,9)]),2)
library(ggcorrplot)
ggcorrplot(cor(cars_sample[,c(2,5,7,8,9)]), type='lower')
round(cor(cars_sample[,c(2,3,5,7,8,9)]),2)
library(ggcorrplot)
ggcorrplot(cor(cars_sample[,c(2,5,7,8,9)]), type='lower')
library(ggcorrplot)
ggcorrplot(cars_sample_cormat, type='lower')
model_summary(cars_model, cars_sample_test, cars_sample_test$price)
cars_sample_cormat <- round(cor(cars_sample[,c(2,3,5,7,8,9)]),2)
library(ggcorrplot)
ggcorrplot(cars_sample_cormat, type='lower')
cars_sample_cormat <- round(cor(cars_sample[,c(2,3,5,7,8,9)]),2)
cars_sample_cormat
